//! Emulator for the MOS 6502
//!
//! This does not include support for Binary Coded Decimal, which was omitted
//! on the 2A03 variant used on the NES and Famicom. Support for BCD may be
//! added later.

use std::cell::RefCell;
use std::fmt;
use std::num::Wrapping;
use std::rc::Rc;

use crate::databus::Bus;
use crate::devices::instr_decode;
use crate::devices::structs::{AddressingMode, Instruction, Status};

fn bytes_to_addr(lo: u8, hi: u8) -> u16 {
    (u16::from(lo) << 8) + u16::from(hi)
}

pub struct Cpu6502<T: Bus> {
    //region CPU Registers
    /// The Accumulator register
    acc: u8,

    /// X index register
    x: u8,

    /// Y index register
    y: u8,

    /// The stack pointer
    ///
    /// # Note
    ///
    /// This register is a pointer to a location in memory on the first page
    /// ($01XX) of memory. The 6502 uses a bottom-up stack, so the 'first'
    /// location on the stack is `$01FF` and the 'last' is `$0100`.
    ///
    /// Stack _overflow_ occurs when the stack pointer decreases all the way to
    /// $00 and wraps around to $FF (the beginning). _Underflow_ occurs the
    /// other way around, from $FF to $00.
    stack: u8,

    /// The program counter
    ///
    /// # Note
    ///
    /// This is incremented by the emulator after executing each instruction,
    /// and refers to the address in memory of the next instruction
    pc: u16,

    /// The instruction being executed.
    ///
    /// # Note
    ///
    /// Instructions consist of an opcode, having 1 byte, and an optional
    /// operand having 1 or 2 bytes (depending on the instruction and addressing
    /// mode).
    ///
    /// The last 8 bits of this register are unused.
    instruction: u32,

    /// The program status register.
    status: Status,
    //endregion

    //region internal state
    // The variables below are used as internal state by the emulator, and
    // are unrelated to the 6502.
    /// The number of cycles to wait before executing the next instruction.
    ///
    /// # Note
    ///
    /// On the 6502, most instructions took longer than 1 clock cycle. Some
    /// took quite a few more, as the instruction had to read off operands
    /// from memory. This is a counter to simulate that- if not zero,
    /// `clock` will simply decrement this and continue.
    cycles: u8,

    /// The total number of cycles that this CPU has ran
    ///
    /// # Note
    ///
    /// This is allowed to overflow, as it's only used for debugging and test
    /// comparison. It is not a part of core emulation.
    tot_cycles: u32,

    /// The resolved address of the instruction
    addr: u16,

    /// The addressing mode of the opcode being executed
    addr_mode: AddressingMode,

    /// The opcode being executed
    instr: Instruction,

    /// A reference to the address bus.
    ///
    /// # Note
    ///
    /// Busses are typically owned by a higher level struct, and should have
    /// lifetimes equivalent to or exceeding the CPU lifetime.
    ///
    /// The bus should be set before executing instructions, and should not be
    /// set more than once- this will result in undefined behavior.
    bus: Rc<RefCell<T>>,

    /// Whether an interrupt is pending
    interrupt_pending: bool,
    /// Whether that interrupt was generated by an NMI (false) or IRQ (true)
    maskable_interrupt: bool,
    //endregion
}

impl<T: Bus> Cpu6502<T> {
    pub fn tick(&mut self) -> bool {
        if self.cycles > 0 {
            self.tot_cycles += 1;
            self.cycles -= 1;
            return false;
        }
        true
    }

    pub fn exec(&mut self) {
        self.run_interrupt();
        self.load_opcode();
        self.decode_opcode(self.instruction);
        self.addr = self.get_addr(self.instruction);
        self.exec_instr();
    }

    pub fn debug(&mut self) -> String {
        let old_pc = self.pc;
        self.run_interrupt();
        self.load_opcode();
        self.decode_opcode(self.instruction);
        self.addr = self.get_addr(self.instruction);
        let new_pc = self.pc;
        self.pc = old_pc;
        let debug_str = format!("{}", self);
        self.pc = new_pc;
        self.exec_instr();
        debug_str
    }

    pub fn reset(&mut self) {
        self.stack -= 3;
        self.status |= Status::IRQ_DISABLE;
        let lo = self.read_bus(0xFFFC);
        let hi = self.read_bus(0xFFFD);
        self.pc = bytes_to_addr(hi, lo);
    }

    pub fn set_flag(&mut self, flag: Status) {
        self.status |= flag;
    }

    pub fn clear_flag(&mut self, flag: Status) {
        self.status &= !flag;
    }

    pub fn jmp(&mut self, addr: u16) {
        self.pc = addr;
    }

    pub fn trigger_nmi(&mut self) {
        self.interrupt_pending = true;
        self.maskable_interrupt = false;
    }

    pub fn trigger_irq(&mut self) {
        if self.status.contains(Status::IRQ_DISABLE) {
            return; // interrupt ignored
        }
        self.interrupt_pending = true;
        self.maskable_interrupt = true;
    }

    fn load_opcode(&mut self) {
        let mut bus = self.bus.borrow_mut();
        let opcode = bus.read(self.pc);
        let operand1 = bus.read((Wrapping(self.pc) + Wrapping(1)).0);
        let operand2 = bus.read((Wrapping(self.pc) + Wrapping(2)).0);
        self.instruction =
            u32::from(opcode) + (u32::from(operand1) << 8) + (u32::from(operand2) << 16)
    }

    fn adv_pc(&mut self, inc: u16) {
        self.pc = (Wrapping(self.pc) + Wrapping(inc)).0;
    }

    /// Decodes an instruction into it's opcode and operand.
    ///
    /// # Notes
    ///
    /// Uses an algorithm described here: http://nparker.llx.com/a2/opcodes.html
    ///
    /// This may have errors or omissions for the NES 2A03, as that CPU's
    /// undocumented opcodes may be different in important ways.
    fn decode_opcode(&mut self, instruction: u32) {
        let ops = instruction.to_le_bytes();

        let instr = instr_decode::decode_instruction(ops[0]);
        self.addr_mode = instr.0;
        self.instr = instr.1;
    }

    /// Gets the address of the operand to read from.
    ///
    /// # Notes
    ///
    /// This sets the `cycles` to the average whole number of cycles any
    /// instruction with this addressing mode will have. Other instructions may
    /// need to add or subtract to compensate, refer to the 6502 datasheet for
    /// details:
    ///
    /// http://archive.6502.org/datasheets/mos_6501-6505_mpu_preliminary_aug_1975.pdf
    ///
    /// A note on the so-called "oops" cycle: The "oops" cycle occurs when an
    /// index instruction crosses a page boundary, as the CPU reads off the high
    /// byte first without checking for a carry-out. Some instructions (like all
    /// the store instructions) have some special-cased behavior that the 6502
    /// datasheet details. These depend on the instruction being executed, but
    /// this function is the best place to
    fn get_addr(&mut self, instruction: u32) -> u16 {
        let ops = instruction.to_le_bytes();
        // +2 cycles for instr + byte1 of op readout, minimum
        self.cycles += 2;
        // Advance the PC at _least_ 1 byte
        self.adv_pc(1);

        match self.addr_mode {
            AddressingMode::Abs => {
                self.cycles += 1;
                self.adv_pc(2);
                bytes_to_addr(ops[2], ops[1])
            }
            AddressingMode::AbsInd => {
                let addr_lo = bytes_to_addr(ops[2], ops[1]);
                let addr_hi = bytes_to_addr(ops[2], ops[1].wrapping_add(1));
                self.adv_pc(2);
                let hi = self.read_bus(addr_hi);
                let lo = self.read_bus(addr_lo);
                bytes_to_addr(hi, lo)
            }
            AddressingMode::AbsX => {
                let addr = bytes_to_addr(ops[2], ops[1]) + u16::from(self.x);
                self.adv_pc(2);
                if (u16::from(self.x) + u16::from(ops[1])) & 0x0100 == 0x0100 {
                    self.cycles += 1; // oops cycle
                }
                self.cycles += 3;
                addr
            }
            AddressingMode::AbsY => {
                let addr = bytes_to_addr(ops[2], ops[1]).wrapping_add(u16::from(self.y));
                self.adv_pc(2);
                if (u16::from(self.y) + u16::from(ops[1])) & 0x0100 == 0x0100 {
                    self.cycles += 1; // oops cycle
                }
                self.cycles += 3;
                addr
            }
            AddressingMode::Accum => {
                // TODO: Make addressing Optional?
                0x0000
            }
            AddressingMode::Imm => {
                self.adv_pc(1);
                0x0000
            }
            AddressingMode::Impl => 0x0000,
            AddressingMode::IndX => {
                self.adv_pc(1);
                let val = Wrapping(ops[1]) + Wrapping(self.x);
                let lo = self.read_bus(u16::from(val.0));
                let hi = self.read_bus(0xFF & (u16::from(val.0) + 1));
                self.cycles += 1;
                bytes_to_addr(hi, lo)
            }
            AddressingMode::IndY => {
                self.adv_pc(1);
                let lo = self.read_bus(u16::from(ops[1]));
                let hi = self.read_bus(0xFF & (u16::from(ops[1]) + 1));
                if (u16::from(self.y) + u16::from(lo)) & 0x0100 == 0x0100 {
                    self.cycles += 1; // oops cycle
                }
                (Wrapping(bytes_to_addr(hi, lo)) + Wrapping(u16::from(self.y))).0
            }
            AddressingMode::Rel => {
                self.adv_pc(1);
                let bytes = self.pc.to_le_bytes();
                // The 'offset' is _signed_, so we need to add it as a signed
                // integer. Rust doesn't seem to like direct casts since they
                // can hide undefined behavior on some platforms, so we have
                // to be explicit.
                let lo = bytes[0];
                let hi = bytes[1];
                let addr = bytes_to_addr(hi, lo);
                if ops[1] > 127 {
                    // Twos compliment
                    addr.wrapping_sub(u16::from(!(ops[1]) + 1))
                } else {
                    addr.wrapping_add(u16::from(ops[1]))
                }
            }
            AddressingMode::ZP => {
                self.adv_pc(1);
                bytes_to_addr(0, ops[1])
            }
            AddressingMode::ZPX => {
                self.adv_pc(1);
                bytes_to_addr(0, (Wrapping(ops[1]) + Wrapping(self.x)).0)
            }
            AddressingMode::ZPY => {
                self.adv_pc(1);
                bytes_to_addr(0, (Wrapping(ops[1]) + Wrapping(self.y)).0)
            }
        }
    }

    /// Read a byte from the bus, adding one to the cycle time
    fn read_bus(&mut self, addr: u16) -> u8 {
        self.cycles += 1;
        let mut bus = self.bus.borrow_mut();
        bus.read(addr)
    }

    /// Read the data at the resolved address
    fn read(&mut self) -> u8 {
        let ops = self.instruction.to_le_bytes();
        match self.addr_mode {
            AddressingMode::Imm => ops[1],
            AddressingMode::Accum => self.acc,
            _ => self.read_bus(self.addr),
        }
    }

    fn write(&mut self, data: u8) {
        self.cycles += 1;
        let mut bus = self.bus.borrow_mut();
        bus.write(self.addr, data);
    }

    fn push_stack(&mut self, data: u8) {
        let mut bus = self.bus.borrow_mut();
        let addr = bytes_to_addr(0x01, self.stack);
        bus.write(addr, data);
        self.cycles += 1;
        self.stack = (Wrapping(self.stack) - Wrapping(1)).0;
    }

    fn pop_stack(&mut self) -> u8 {
        self.stack = (Wrapping(self.stack) + Wrapping(1)).0;
        let addr = bytes_to_addr(0x01, self.stack);
        self.read_bus(addr)
    }

    fn check_carry(&mut self, val: u16) {
        if val & 0x100 == 0x100 {
            // an overflow occured
            self.set_flag(Status::CARRY);
        } else {
            self.clear_flag(Status::CARRY);
        }
    }

    fn check_zero(&mut self, val: u8) {
        if val == 0 {
            self.set_flag(Status::ZERO);
        } else {
            self.clear_flag(Status::ZERO);
        }
    }

    fn check_overflow(&mut self, left: u8, right: u8) {
        let left = u16::from(left);
        let right = u16::from(right);
        let res = left + right;
        if ((left ^ res) & (right ^ res)) & 0x80 != 0 {
            self.set_flag(Status::OVERFLOW);
        } else {
            self.clear_flag(Status::OVERFLOW);
        }
    }

    fn check_negative(&mut self, op: u8) {
        if op & 0x80 != 0 {
            self.set_flag(Status::NEGATIVE);
        } else {
            self.clear_flag(Status::NEGATIVE);
        }
    }

    /// Execute the loaded instruction.
    ///
    /// Internally this uses a massive match pattern- TBD on whether this should
    /// be changed, but given that most of the instructions are self-contained
    /// and very short, I think it's not indefensible (plus it's easy).
    fn exec_instr(&mut self) {
        match self.instr {
            //region Arithmetic ops
            // ADC SBC
            Instruction::ADC => {
                if self.status.contains(Status::DECIMAL) {
                    eprintln!(" [WARN] This emulator doesn't support BCD, but the BCD flag is set");
                }
                let op = self.read();
                let val = Wrapping(u16::from(self.acc))
                    + Wrapping(u16::from(op))
                    + Wrapping(if self.status.contains(Status::CARRY) {
                        1
                    } else {
                        0
                    });
                self.check_carry(val.0);
                self.check_overflow(self.acc, op);
                self.acc = (0xFF & val.0) as u8;
                self.check_zero(self.acc);
                self.check_negative(self.acc);
            }
            Instruction::SBC => {
                if self.status.contains(Status::DECIMAL) {
                    eprintln!(" [WARN] This emulator doesn't support BCD, but the BCD flag is set");
                }
                let op = self.read();
                let val = Wrapping(u16::from(self.acc))
                    - Wrapping(u16::from(op))
                    - Wrapping(if !self.status.contains(Status::CARRY) {
                        1
                    } else {
                        0
                    });
                self.check_carry(!val.0);
                self.check_overflow(self.acc, !op);
                self.acc = (0xFF & val.0) as u8;
                self.check_zero(self.acc);
                self.check_negative(self.acc);
            }
            //endregion

            //region Bitwise ops
            // AND BIT EOR ORA
            Instruction::AND => {
                self.acc &= self.read();
                self.check_zero(self.acc);
                self.check_negative(self.acc);
            }
            Instruction::BIT => {
                let op = self.read();
                let res = self.acc & op;
                self.check_zero(res);
                self.status = Status::from_bits_truncate((self.status.bits() & 0x3F) | (0xC0 & op));
            }
            Instruction::EOR => {
                self.acc ^= self.read();
                self.check_zero(self.acc);
                self.check_negative(self.acc);
            }
            Instruction::ORA => {
                self.acc |= self.read();
                self.check_zero(self.acc);
                self.check_negative(self.acc);
            }
            //endregion
            Instruction::ASL => {
                let op = self.read();
                let res = u16::from(op) << 1;
                self.check_carry(res);
                let res = (0xFF & res) as u8;
                self.check_zero(res);
                self.check_negative(res);
                // Cycle corrections
                if self.addr_mode == AddressingMode::ZP || self.addr_mode == AddressingMode::Abs {
                    self.cycles += 1;
                };
                match self.addr_mode {
                    AddressingMode::Accum => self.acc = res,
                    _ => self.write(res),
                }
            }

            //region Branch instructions
            // BPL BMI BVC BVS BCC BCS BEQ BNE
            Instruction::BPL => {
                if self.status.contains(Status::NEGATIVE) {
                    return;
                }
                self.cycles += 1;
                self.pc = self.addr;
            }
            Instruction::BMI => {
                if !self.status.contains(Status::NEGATIVE) {
                    return;
                }
                self.cycles += 1;
                self.pc = self.addr;
            }
            Instruction::BVC => {
                if self.status.contains(Status::OVERFLOW) {
                    return;
                }
                self.cycles += 1;
                self.pc = self.addr;
            }
            Instruction::BVS => {
                if !self.status.contains(Status::OVERFLOW) {
                    return;
                }
                self.cycles += 1;
                self.pc = self.addr;
            }
            Instruction::BCC => {
                if self.status.contains(Status::CARRY) {
                    return;
                }
                self.cycles += 1;
                self.pc = self.addr;
            }
            Instruction::BCS => {
                if !self.status.contains(Status::CARRY) {
                    return;
                }
                self.cycles += 1;
                self.pc = self.addr;
            }
            Instruction::BEQ => {
                if !self.status.contains(Status::ZERO) {
                    return;
                }
                self.cycles += 1;
                self.pc = self.addr;
            }
            Instruction::BNE => {
                if self.status.contains(Status::ZERO) {
                    return;
                }
                self.cycles += 1;
                self.pc = self.addr;
            }
            //endregion
            Instruction::BRK => {
                let addr_bytes = self.pc.to_le_bytes();
                self.push_stack(addr_bytes[1]);
                self.push_stack(addr_bytes[0]);
                self.set_flag(Status::BREAK);
                self.set_flag(Status::UNUSED);
                let status = self.status.bits();
                self.push_stack(status);
                let addr_hi = self.read_bus(0xFFFE);
                let addr_lo = self.read_bus(0xFFFF);
                self.pc = bytes_to_addr(addr_lo, addr_hi);
            }

            //region Compare functions
            // CMP CPX CPY
            Instruction::CMP => {
                let data = self.read();
                let res = Wrapping(self.acc) - Wrapping(data);
                self.status.set(Status::CARRY, self.acc >= data);
                self.check_zero(res.0);
                self.check_negative(res.0);
            }
            Instruction::CPX => {
                let data = self.read();
                let res = Wrapping(self.x) - Wrapping(data);
                self.status.set(Status::CARRY, self.x >= data);
                self.check_zero(res.0);
                self.check_negative(res.0);
            }
            Instruction::CPY => {
                let data = self.read();
                let res = Wrapping(self.y) - Wrapping(data);
                self.status.set(Status::CARRY, self.y >= data);
                self.check_zero(res.0);
                self.check_negative(res.0);
            }
            // endregion

            //region Memory functions
            // DEC INC LSR ROL ROR
            Instruction::DEC => {
                let op = (Wrapping(self.read()) - Wrapping(1)).0;
                self.cycles += 1;
                self.write(op);
                self.check_zero(op);
                self.check_negative(op);
            }
            Instruction::INC => {
                let op = (Wrapping(self.read()) + Wrapping(1)).0;
                self.cycles += 1;
                self.write(op);
                self.check_zero(op);
                self.check_negative(op);
            }
            Instruction::LSR => {
                // I'm doing a bit of a trick here
                // If we look at the *high* byte, then functionally there's no
                // difference between (u16 << 7) and (u8 >> 1). But by casting
                // to u16 and doing it 'backwards', we preserve the lopped off
                // bit so that we can use it to set the carry bit
                let data = u16::from(self.read()) << 7;
                // we want the last bit for the carry -----v
                self.status.set(Status::CARRY, data & 0x00_80 == 0x00_80);
                // throw out the extra byte now that we're done with it
                let data = data.to_be_bytes()[0];
                self.check_zero(data);
                self.check_negative(data);
                // Finally, since this _could_ go to the accumulator, we need to
                // check for that addressing mode
                match self.addr_mode {
                    AddressingMode::ZP => {
                        self.cycles += 1;
                        self.write(data);
                    }
                    AddressingMode::Accum => self.acc = data,
                    _ => self.write(data),
                };
                // cycle count correction
                if self.addr_mode == AddressingMode::Abs {
                    self.cycles += 1
                };
            }
            Instruction::ROR => {
                // See my notes on the LSR instruction, I do a similar trick
                // here (for similar reasons)
                let data = u16::from(self.read()) << 7
                    | if self.status.contains(Status::CARRY) {
                        0x80_00
                    } else {
                        0x0
                    };
                self.status.set(Status::CARRY, data & 0x00_80 == 0x00_80);
                let data = data.to_be_bytes()[0];
                self.check_zero(data);
                self.check_negative(data);
                // Even the caveat on addressing is the same
                match self.addr_mode {
                    AddressingMode::Accum => self.acc = data,
                    _ => self.write(data),
                };
                // cycle count correction
                if self.addr_mode == AddressingMode::Abs || self.addr_mode == AddressingMode::ZP {
                    self.cycles += 1
                };
            }
            Instruction::ROL => {
                let data = (u16::from(self.read()) << 1)
                    | if self.status.contains(Status::CARRY) {
                        0x01
                    } else {
                        0x00
                    };
                self.status.set(Status::CARRY, data & 0x01_00 == 0x01_00);
                let data: u8 = (data & 0xFF) as u8;
                self.check_zero(data);
                self.check_negative(data);
                match self.addr_mode {
                    AddressingMode::Accum => self.acc = data,
                    _ => self.write(data),
                };
                // cycle count correction
                if self.addr_mode == AddressingMode::Abs || self.addr_mode == AddressingMode::ZP {
                    self.cycles += 1
                };
            }
            //endregion

            //region Flag operations
            // CLC SEC CLI SEI CLV CLD SED
            Instruction::CLC => self.clear_flag(Status::CARRY),
            Instruction::SEC => self.set_flag(Status::CARRY),
            Instruction::CLI => self.clear_flag(Status::IRQ_DISABLE),
            Instruction::SEI => self.set_flag(Status::IRQ_DISABLE),
            Instruction::CLV => self.clear_flag(Status::OVERFLOW),
            Instruction::CLD => self.clear_flag(Status::DECIMAL),
            Instruction::SED => self.set_flag(Status::DECIMAL),
            //endregion

            //region Jumps
            // JMP JSR RTI RTS
            Instruction::JMP => {
                if self.addr_mode != AddressingMode::Abs {
                    self.cycles += 1;
                }
                self.pc = self.addr;
            }
            Instruction::JSR => {
                if self.addr_mode != AddressingMode::Abs {
                    self.cycles += 1;
                }
                let addr_bytes = (self.pc - 1).to_le_bytes();
                self.push_stack(addr_bytes[1]);
                self.push_stack(addr_bytes[0]);
                self.pc = self.addr;
                self.cycles += 1;
            }
            Instruction::RTI => {
                let flags = self.pop_stack();
                self.status = Status::from_bits_truncate(flags) | Status::UNUSED;
                let lo = self.pop_stack();
                let hi = self.pop_stack();
                self.pc = bytes_to_addr(hi, lo);
                self.cycles += 1;
            }
            Instruction::RTS => {
                let lo = self.pop_stack();
                let hi = self.pop_stack();
                self.pc = bytes_to_addr(hi, lo) + 1;
                self.cycles += 2;
            }
            //endregion

            //region Loads
            Instruction::LDA => {
                self.acc = self.read();
                self.check_zero(self.acc);
                self.check_negative(self.acc);
            }
            Instruction::LDX => {
                self.x = self.read();
                self.check_zero(self.x);
                self.check_negative(self.x);
            }
            Instruction::LDY => {
                self.y = self.read();
                self.check_zero(self.y);
                self.check_negative(self.y);
            }
            //endregion
            Instruction::NOP => {
                // no operation
            }

            //region Register instructions
            Instruction::TAX => {
                self.x = self.acc;
                self.check_zero(self.x);
                self.check_negative(self.x);
            }
            Instruction::TXA => {
                self.acc = self.x;
                self.check_zero(self.acc);
                self.check_negative(self.acc);
            }
            Instruction::TAY => {
                self.y = self.acc;
                self.check_zero(self.y);
                self.check_negative(self.y);
            }
            Instruction::TYA => {
                self.acc = self.y;
                self.check_zero(self.acc);
                self.check_negative(self.acc);
            }
            Instruction::INX => {
                self.x = (Wrapping(self.x) + Wrapping(1)).0;
                self.check_zero(self.x);
                self.check_negative(self.x);
            }
            Instruction::DEX => {
                self.x = (Wrapping(self.x) - Wrapping(1)).0;
                self.check_zero(self.x);
                self.check_negative(self.x);
            }
            Instruction::INY => {
                self.y = (Wrapping(self.y) + Wrapping(1)).0;
                self.check_zero(self.y);
                self.check_negative(self.y);
            }
            Instruction::DEY => {
                self.y = (Wrapping(self.y) - Wrapping(1)).0;
                self.check_zero(self.y);
                self.check_negative(self.y);
            }
            //endregion

            //region Storage instruction
            Instruction::STA => {
                self.write(self.acc);
                // Cycle count corrections
                if self.addr_mode == AddressingMode::IndY {
                    self.cycles += 1;
                }
            }
            Instruction::STX => {
                self.write(self.x);
            }
            Instruction::STY => {
                self.write(self.y);
            }
            //endregion

            //region Stack instructions
            Instruction::TXS => {
                self.stack = self.x;
            }
            Instruction::TSX => {
                self.x = self.stack;
                self.check_zero(self.x);
                self.check_negative(self.x);
            }
            Instruction::PHA => {
                self.push_stack(self.acc);
            }
            Instruction::PLA => {
                self.acc = self.pop_stack();
                self.check_zero(self.acc);
                self.check_negative(self.acc);
                self.cycles += 1;
            }
            Instruction::PHP => self.push_stack(self.status.bits() | 0x30),
            Instruction::PLP => {
                self.status = Status::from_bits_truncate((self.pop_stack() & 0xEF) | 0x20);
                self.cycles += 1;
            } //endregion
        }
    }

    fn run_interrupt(&mut self) -> bool {
        if !self.interrupt_pending {
            return false;
        }
        eprintln!(
            " [INFO] CPU Interrupt: {}",
            if self.maskable_interrupt {
                "IRQ"
            } else {
                "NMI"
            }
        );
        self.interrupt_pending = false;
        let addr_bytes = self.pc.to_le_bytes();
        self.push_stack(addr_bytes[1]);
        self.push_stack(addr_bytes[0]);
        self.clear_flag(Status::BREAK);
        self.set_flag(Status::UNUSED);
        let status = self.status.bits();
        self.push_stack(status);
        let addr = if self.maskable_interrupt {
            0xFFFE
        } else {
            0xFFFA
        };
        let addr_lo = self.read_bus(addr);
        let addr_hi = self.read_bus(addr + 1);
        self.pc = bytes_to_addr(addr_lo, addr_hi);
        true
    }

    // Statics
    /// Create a new CPU, connected to the given databus.
    ///
    /// # Note
    ///
    /// Default values are the NES power-up vals
    /// cf. http://wiki.nesdev.com/w/index.php/CPU_power_up_state
    pub fn new(bus: Rc<RefCell<T>>) -> Cpu6502<T> {
        Cpu6502 {
            acc: 0,
            x: 0,
            y: 0,
            stack: 0xFD,
            pc: 0xC000,
            // IRQ disabled
            // Unwrapping b/c this is a constant and should be OK
            status: Status::from_bits(0x24).unwrap(),

            // internal state
            bus,
            cycles: 0,
            tot_cycles: 7,
            instruction: 0xEA,
            addr: 0,
            addr_mode: AddressingMode::Impl,
            instr: Instruction::NOP,
            interrupt_pending: false,
            maskable_interrupt: false,
        }
    }
}

impl<T: Bus> fmt::Display for Cpu6502<T> {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        let bytes = self.instruction.to_le_bytes();
        let ops = match self.addr_mode {
            AddressingMode::Abs
            | AddressingMode::AbsX
            | AddressingMode::AbsY
            | AddressingMode::AbsInd => {
                format!("{:02X} {:02X} {:02X}", bytes[0], bytes[1], bytes[2])
            }
            AddressingMode::Accum | AddressingMode::Impl => format!("{:8<02X}", bytes[0]),
            _ => format!("{:02X} {:02X}   ", bytes[0], bytes[1]),
        };

        let operand_bytes = bytes_to_addr(bytes[2], bytes[1]);
        let bus = self.bus.borrow();
        let data = bus.read_debug(self.addr);
        let addr = self.addr;
        let is_jmp = self.instr == Instruction::JMP || self.instr == Instruction::JSR;
        let instr = match self.addr_mode {
            AddressingMode::Abs => {
                if !is_jmp {
                    format!("{:3?} ${:04X} = {:02X}", self.instr, addr, data)
                } else {
                    format!("{:3?} ${:04X}", self.instr, addr)
                }
            }
            AddressingMode::AbsX => format!(
                "{:3?} ${:04X},X @ {:04X} = {:02X}",
                self.instr, operand_bytes, addr, data
            ),
            AddressingMode::AbsY => format!(
                "{:3?} ${:04X},Y @ {:04X} = {:02X}",
                self.instr, operand_bytes, addr, data
            ),
            AddressingMode::AbsInd => {
                format!("{:3?} (${:04X}) = {:04X}", self.instr, operand_bytes, addr)
            }
            AddressingMode::Imm => format!("{:3?} #${:02X}", self.instr, bytes[1]),
            AddressingMode::ZP => format!("{:3?} ${:02X} = {:02X}", self.instr, addr, data),
            AddressingMode::ZPX => format!(
                "{:3?} ${:02X},X @ {:02X} = {:02X}",
                self.instr, bytes[1], addr, data
            ),
            AddressingMode::ZPY => format!(
                "{:3?} ${:02X},Y @ {:02X} = {:02X}",
                self.instr, bytes[1], addr, data
            ),
            AddressingMode::Impl => format!("{:3?}", self.instr),
            AddressingMode::Rel => format!("{:3?} ${:04X}", self.instr, addr),
            AddressingMode::Accum => format!("{:3?} A", self.instr),
            AddressingMode::IndX => {
                let sum = Wrapping(self.x) + Wrapping(bytes[1]);
                format!(
                    "{:3?} (${:02X},X) @ {:02X} = {:04X} = {:02X}",
                    self.instr, bytes[1], sum, addr, data
                )
            }
            AddressingMode::IndY => {
                let ind = bytes_to_addr(
                    bus.read_debug(0xFF & (u16::from(bytes[1]) + 1)),
                    bus.read_debug(u16::from(bytes[1])),
                );
                format!(
                    "{:3?} (${:02X}),Y = {:04X} @ {:04X} = {:02X}",
                    self.instr, bytes[1], ind, addr, data
                )
            }
        };
        write!(
            f,
            //PC     Ops   Inst Accum    X reg    Y reg    Status   Stack     PPU.row...line  tot_cycles
            "{:04X}  {:8}  {:32}A:{:02X} X:{:02X} Y:{:02X} P:{:02X} SP:{:02X} PPU:{:>3},{:>3} CYC:{}",
            self.pc,
            ops,
            instr,
            self.acc,
            self.x,
            self.y,
            self.status,
            self.stack,
            0,
            0,
            self.tot_cycles
        )
    }
}
